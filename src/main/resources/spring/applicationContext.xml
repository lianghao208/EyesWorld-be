<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-4.2.xsd">
    <!-- 总配置文件 -->
    <!-- 1.配置数据库相关参数properties属性： ${url} -->
    <context:property-placeholder location="classpath:properties/*.properties"/>
    <!-- 2.导入spring下所有的配置文件 -->
    <!-- <import resource="classpath:spring/spring-*.xml" /> -->


    <!-- dao层配置 -->
    <!-- 配置整合mybatis过程 -->
    <!-- 1.配置数据库相关参数properties属性： ${url} -->
    <!-- <context:property-placeholder location="classpath:properties/jdbc.properties"/> -->
    <!-- 2.数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>

        <!-- c3p0连接池私有属性 -->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="false"/>
        <!-- 获取连接超时时间 -->
        <property name="checkoutTimeout" value="1000"/>
        <!-- 获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBatis全局配置文件：mybatis-config.xml -->
        <property name="configLocation" value="classpath:spring/mybatis-config.xml"/>
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="org.tvos.entity"/>
        <!-- 扫描sql配置文件：mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>

    </bean>

    <!-- 4.扫描DAO接口包，动态实现DAO接口，注入到spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Dao接口包 -->
        <property name="basePackage" value="org.tvos.dao"/>
    </bean>

    <!-- service层配置 -->
    <!-- 扫描service包下所有使用注解的类型 -->
    <context:component-scan base-package="org.tvos.service"/>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>

    </bean>

    <!-- redis的dao注入 -->
    <bean id="redisDao" class="org.tvos.dao.cache.RedisDao">
        <constructor-arg index="0" value="127.0.0.1"/>
        <constructor-arg index="1" value="6379"/>
    </bean>
    <!-- 配置基于注解的声明式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- security配置
    <security:http pattern="/index.jsp" security="none" />-->
    <!-- intercept-url添加拦截器 -->
    <security:http use-expressions="true">
        <security:custom-filter ref="corsHandler" after="PRE_AUTH_FILTER"/>
        <security:intercept-url pattern="/tmp/tvlogin.html" access="isAuthenticated()"/>
        <security:intercept-url pattern="/tmp/tvhome.html" access="isAuthenticated()"/>
        <security:intercept-url pattern="/tmp/uploadtest.html" access="isAuthenticated()"/>
        <security:intercept-url pattern="/api/provinces/cities/**/like" access="isAuthenticated()"/>
        <security:intercept-url pattern="/api/spotsComment/**" access="isAuthenticated()"/>
        <security:intercept-url pattern="/api/spotsComment/**" access="isAuthenticated()"/>

        <security:intercept-url pattern="/api/provinces/college/**/like" access="isAuthenticated()"/>
        <security:intercept-url pattern="/api/collegeComment/**" access="isAuthenticated()"/>

        <security:intercept-url pattern="/api/user/works" access="isAuthenticated()"/>
        <security:intercept-url pattern="/api/user/works/**" access="isAuthenticated()"/>

        <security:intercept-url pattern="/api/user" access="isAuthenticated()"/>
        <security:intercept-url pattern="/mainpage.html" access="isAuthenticated()"/>
        <security:intercept-url pattern="/mywork.html" access="isAuthenticated()"/>
        <security:intercept-url pattern="/upload.html" access="isAuthenticated()"/>
        <security:intercept-url pattern="/information.html" access="isAuthenticated()"/>
        <security:form-login login-page="/login.html" login-processing-url="/p_login"
                             authentication-success-forward-url="/success.html"
                             authentication-failure-url="/fail.html"/>
        <security:remember-me key="qwer" remember-me-parameter="remember-me" remember-me-cookie="sfnfncfs"/>
        <security:logout logout-url="/p_logout"/>

        <security:csrf disabled="true"/>


    </security:http>
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="customUserDetailsServiceImpl"/>

        <!--<security:authentication-provider>
            <security:user-service>

                <security:user name="admin" authorities="admin" password="abc"/>
            </security:user-service>
        </security:authentication-provider>-->
    </security:authentication-manager>

    <bean id="corsHandler" class="org.tvos.filter.CorsFilter"/>

</beans>